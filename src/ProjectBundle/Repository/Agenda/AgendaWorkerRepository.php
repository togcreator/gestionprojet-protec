<?php

namespace ProjectBundle\Repository\Agenda;
use Doctrine\ORM\Query\Expr\Join;

/**
 * AgendaWorkerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgendaWorkerRepository extends \Doctrine\ORM\EntityRepository
{
	// project etape all
	public function findProjectEtapeAll () 
	{	
		$return = $this->createQueryBuilder('o')
			->select('o', 'e.object', 'e.id')
			->innerJoin('ProjectBundle:Common\ProjectEtape', 'e', Join::WITH, 'e.id = o.idProjetEtape')
			->where('o.idProjetEtape <> :idEtape')
			->setParameter('idEtape', 0);

        // return
        $return = $return->getQuery()->execute();
        return count($return) ? $return : null;
	}

	// project etape operation all
	public function findProjectEtapeOperationAll () 
	{	
		$return = $this->createQueryBuilder('o')
			->select('o', 'e.object', 'e.id')
			->innerJoin('ProjectBundle:Common\ProjectEtapesOperations', 'e', Join::WITH, 'e.id = o.idProjetOperation')
			->where('o.idProjetOperation <> :idOperation')
			->setParameter('idOperation', 0);

        // return
        $return = $return->getQuery()->execute();
        return count($return) ? $return : null;
	}

	// project etape operatio issue all
	public function findProjectEtapeOperationIssueAll () 
	{	
		$return = $this->createQueryBuilder('o')
			->select('o', 'e.libelle', 'e.id')
			->innerJoin('ProjectBundle:Common\ProjectEtapesOperationsIssues', 'e', Join::WITH, 'e.id = o.idProjetIssue')
			->where('o.idProjetIssue <> :idIssue')
			->setParameter('idIssue', 0);

        // return
        $return = $return->getQuery()->execute();
        return count($return) ? $return : null;
	}

	// crm etape all
	public function findCrmEtapesOperationsByUser ($user_id = null, $entite_id = null, $bu_id = null) 
	{	
		$select = ['o.dateDebPrevue', 'o.dateFinPrevue', 'o.dateDebReelle', 'o.dateFinReelle', 'e.objet', 'e.id', 's.couleur', 'u.firstname', 'u.lastname'];

		$return = $this->createQueryBuilder('o')
			->select($select);
		$return->distinct();

		$return
			->innerJoin('CrmBundle:Common\CrmEtapesOperations', 'e', Join::WITH, 'e.id = o.idCRMOperation')
			->innerJoin('CrmBundle:Back\CrmParamStatut', 's', Join::WITH, 's.id = e.idStatut')
			->innerJoin('CrmBundle:Common\CrmDossier', 'c', Join::WITH, 'c.id = e.idCRM')
			->innerJoin('UsersBundle:UserClient', 'u', Join::WITH, 'u.id = o.idUser')
			->innerJoin('ClientBundle:Client', 'ec', Join::WITH, 'ec.id = c.idEntiteJ and ec.id = o.idEntityJ');

		if( $user_id ) {
			$return
				// ->innerJoin('CrmBundle:Common\CrmOperationsUsers', 'ou', Join::WITH, 'ou.idOperation = o.idCRMOperation')
				->andWhere('u.id = :user_id or c.idCreateur = :user_id')
				->setParameter('user_id', $user_id);
		}

		if( $bu_id ) {
			$return
				->leftJoin('UsersBundle:RelationBusinessEntite', 'rbe', Join::WITH, 'rbe.iDentite = ec.id')
				->andWhere('rbe.iDBusinessUnit = :bu_id')
				->setParameter('bu_id', $bu_id);
		}

		if( $entite_id ) {
			$return
				->where('ec.id = :entite_id')
				->setParameter('entite_id', $entite_id);
		}

        // return
        $return = $return->getQuery()->execute();

        if($return)
        	foreach($return as $key => &$operation) {
        		$res = $this->createQueryBuilder('o')
					->select('d')
					->innerJoin('CrmBundle:Common\CrmEtapesOperations', 'e', Join::WITH, 'e.id = o.idCRMOperation')
					->leftJoin('CrmBundle:Back\CrmParamCyclesDetails', 'd', Join::WITH, 'd.id = e.idCycledetail')
					->where('e.id = :op_id')
					->setParameter('op_id', $operation['id'])
					->getQuery()->execute();
				if( $res )
					$operation[] = $res[0];

        	}

        	
        return count($return) ? $return : null;
	}
}
