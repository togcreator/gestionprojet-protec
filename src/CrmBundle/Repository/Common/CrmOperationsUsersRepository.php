<?php

namespace CrmBundle\Repository\Common;
use Doctrine\ORM\Query\Expr\Join;

/**
 * CrmOperationsUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CrmOperationsUsersRepository extends \Doctrine\ORM\EntityRepository
{
	// find one
	public function findOneBys ($user, $dateDebut, $dateFin)
	{
		$between = [
			// '(o.datedebut < :dateDebut AND o.datefin < :dateFin AND o.datefin > :dateDebut)',// intervalle A1
			// '(o.datedebut > :dateDebut AND o.datefin > :dateFin AND o.datedebut < :dateFin)', // intervalle A1
			'(o.datedebut < :dateDebut AND o.datefin > :dateFin)', // intervalle A4 inside
			'((o.datedebut BETWEEN :dateDebut AND :dateFin) AND (o.datefin BETWEEN :dateDebut AND :dateFin))', // intervalle A4 inside
		];

		$dateDebut = str_replace('-', '/', $dateDebut);
		$dateFin = str_replace('-', '/', $dateFin);

		$return = $this->createQueryBuilder('o')
			->where('o.idUser = :idUser AND ('. implode(' OR ', $between) .')')
			->setParameters(['idUser' => $user, 'dateDebut' => date('Y/m/d H:i:s', strtotime($dateDebut)), 'dateFin' => date('Y/m/d H:i:s', strtotime($dateFin))]);

		/** for debugging **/
		// $q = $return->getQuery();
		// dump($q);
		// dump($q->execute());
		// exit;

        // return
        $return = $return->getQuery()->execute();
        return count($return) ? $return : null;
	}

	/**
	 * Find all by
	 */
	public function findAllBy ($user_id, $bu_id) {

		$return = $this->createQueryBuilder('ou')->select('ou')
			->innerJoin('CrmBundle:Common\CrmEtapesOperations', 'o', Join::WITH, 'ou.idOperation = o.id');

		if( $bu_id ) {
			$return 
				->innerJoin('CrmBundle:Common\CrmDossier', 'c', Join::WITH, 'c.id = o.idCRM')
				->innerJoin('UsersBundle:RelationBusinessEntite', 'rbe', Join::WITH, 'rbe.iDentite = c.idEntiteJ')
				->andWhere('rbe.iDBusinessUnit = :bu_id')
				->setParameter('bu_id', $bu_id);
		}

        if( $user_id ){
            $return
                ->innerJoin('UsersBundle:UserClient', 'u', Join::WITH, 'c.idCreateur = u.id')
                ->innerJoin('UsersBundle:Users', 'us', Join::WITH, 'us.id = u.iDCompte')
                ->andWhere('u.id = :user_id')
                ->setParameter('user_id', $user_id);
        }
        return $return->getQuery()->execute();
	}
}