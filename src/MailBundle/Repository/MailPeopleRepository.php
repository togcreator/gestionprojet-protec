<?php

namespace MailBundle\Repository;

use UsersBundle\Entity\UserClient;
use MailBundle\Entity\MailFiltreSession;
/**
 * MailPeopleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MailPeopleRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param User $user
     * @return array
     * retourne la liste des mails concernant un user donné
     */
    public function findByMailsList(UserClient $user, $trash) {
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->select('GROUP_CONCAT(DISTINCT mp.to1) as customer, mp as people, m, GROUP_CONCAT(DISTINCT mp.from1) as custfrom')
            ->join("mp.mail", "m");
        $orWhere = $qb->expr()->orX();
        $orWhere->add($qb->expr()->eq("mp.userFrom", ":idUser"));
        $orWhere->add($qb->expr()->eq("mp.userTo", ":idUser"));
        $qb
            ->where($orWhere)
            ->andWhere('mp.id NOT IN (:trash)')
            ->setParameter('idUser', $user->getId())
            ->setParameter('trash', explode(",", $trash))
            ->groupBy('m.id');
            $qb->orderBy("mp.id", 'DESC');

        return $qb->getQuery()->getResult();
    }

     /**
     * @param User $user
     * @return array
     * retourne la liste des mails lus par User en cours
     */
    public function findMailReadList(UserClient $user, $trash) {
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->join("mp.mail", "m")
            ->where('mp.userTo = :idUser')
            ->andWhere("mp.lu = 1")
            // ->andWhere('mp.id NOT IN( :trash)')
            ->setParameter('idUser', $user->getId())
            // ->setParameter('trash', $trash)
            ->orderBy('mp.id', 'DESC');
        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @return array
     * retourne la liste des mails non lus par User en cours
     */
    public function findMailUnReadList(UserClient $user, $trash) {
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->join("mp.mail", "m")
            ->where('mp.userTo = :idUser')
            ->andWhere("mp.lu = 0")
            ->andWhere('mp.id NOT IN( :trash)')
            ->setParameter('idUser', $user->getId())
            ->setParameter('trash', $trash)
            ->orderBy('mp.id', 'DESC');
        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @return array
     * mails reçus
     */
    public function findInbox(UserClient $user, $trash, $new = false, $today = false) {
        $jour = date('Y-m-d');
        $qb = $this->createQueryBuilder('mp');
        $qb->select('GROUP_CONCAT(DISTINCT mp.to1) as customer, mp as people, m, GROUP_CONCAT(DISTINCT mp.from1) as custfrom');
        $qb
            ->join("mp.mail", "m")
            ->where("mp.userTo = :idUser")
            ->andWhere("mp.way = 2")
            ->andWhere('mp.id NOT IN( :trash)')
            ->setParameter('idUser', $user->getId())
            ->setParameter('trash', explode(",", $trash));
            if($new){
                $qb->andWhere("mp.lu = 0");
            }
            if($today) {
                $qb->andWhere("m.daty LIKE :today")
                    ->setParameter('today','%'.$jour.'%');
            }
            $qb->groupBy('m.id');
        $qb->orderBy("m.daty", 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @return array
     * mails envoyés
     */
    public function findOutbox(UserClient $user, $trash, $new = false) {
        $jour = date('Y-m-d');
        $qb = $this->createQueryBuilder('mp');
        $qb->select('GROUP_CONCAT(DISTINCT mp.to1) as customer, mp as people, m, GROUP_CONCAT(DISTINCT mp.from1) as custfrom');

        $qb
            ->join("mp.mail", "m")
            ->where("mp.userFrom = :idUser")
            ->andWhere('mp.id NOT IN( :trash)')
            ->andWhere("mp.way = 1")
            ->setParameter('idUser', $user->getId())
            ->setParameter('trash', explode(",", $trash));
            if($new){
                $qb->andWhere("m.daty LIKE :today")
                    ->setParameter('today','%'.$jour.'%');
            }
            else $qb->groupBy('m.id');
        $qb->orderBy("m.daty", 'DESC');

        return /*($new) ? $qb->getQuery()->getSingleScalarResult() :*/ $qb->getQuery()->getResult();
    }


    public function findByMail($idmp){
        $qb = $this->createQueryBuilder('mp');
        $qb->select('GROUP_CONCAT(mp.userFrom.username)')
            ->where('mp.mail = :idmp')
            ->setParameter('idmp', $idmp);
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByIdMail($id_mail) {
        $qb = $this->createQueryBuilder('mp');
        $qb->select('mp')
           ->join('mp.mail', 'm')
           ->andWhere('m.id = :idmail')
           ->setParameter('idmail', $id_mail);
        return $qb->getQuery()
                  ->getResult();
    }

    /**
     * @return array
     * retourne la liste des mails trash
     */
    public function findFilterMailList($user, $motsCles, $debut, $fin, $priorite, $tbox, $type){
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->select('GROUP_CONCAT(DISTINCT mp.to1) as customer, mp as people, GROUP_CONCAT(DISTINCT mp.from1) as custfrom')
            ->join("mp.mail", "m");

        /*
        *    Initialisation des parametres, on initialise directement les dates il y a toujours de l'intervalle
        */

        if( $debut != null && $fin != null ) {
            $debut = new \DateTime($debut);
            $fin = new \DateTime($fin);
            $parameters  = array("idUser" => $user, 'debut'  => $debut->format('Y-m-d'), 'fin' => $fin->format('Y-m-d'));
        }
        else{
            $parameters  = array("idUser" => $user);
        }

        /*
        *    Préparation du filtre par type de message (reçus / envoyés / tous)
        */
        $orUser = $qb->expr()->orX();
        if($type == 'outbox'){
            $orUser->add($qb->expr()->eq("mp.userFrom", ":idUser"));
        }
        else if($type == 'inbox'){
            $orUser->add($qb->expr()->eq("mp.userTo", ":idUser"));
        }
        else {
            $orUser->add($qb->expr()->eq("mp.userFrom", ":idUser"));
            $orUser->add($qb->expr()->eq("mp.userTo", ":idUser"));
        }
        $qb->andWhere($orUser);

        /*
        *    Préparation du filtre par boite aux lettres
        */
        if( $priorite !== null){
            $orPriorite = $qb->expr()->orX();
            for($k = 0; $k < count($priorite); $k++) {
                $priority = "priorite" .$k;
                $parameters[$priority] = $priorite[$k];
                $param = ":".$priority;
                $orPriorite->add($qb->expr()->eq('m.priorite', $param));
            }
            $qb->andWhere($orPriorite);
        }

        /*
        *    Préparation du filtre par boite aux lettres
        */
        if( $tbox !== null){
            $orTbox = $qb->expr()->orX();
            for($j = 0; $j < count($tbox); $j++) {
                $box = "tbox" .$j;
                $parameters[$box] = $tbox[$j];
                $parameter = ":".$box;
                $orTbox->add($qb->expr()->eq('m.tbox', $parameter));
            }
            $qb->andWhere($orTbox);
        }

        /*
        *    Préparation du filtre par intervalle de date
        */
        /* $andDate = $qb->expr()->andX();
        $andDate->add($qb->expr()->lte('m.daty', ":fin"));
        $andDate->add($qb->expr()->gte('m.daty', ":debut")); */

        if( $debut != null && $fin != null ) {
            $andDate = $qb->expr()->between('m.daty', ":debut", ":fin");
            $qb->andWhere($andDate);
        }

        /*
        *    Préparation des mots clés pour filtre par mots clés
        */

        if($motsCles != null){
            $orMotsCles = $qb->expr()->orX();
            $tabMotsCles = explode(",", $motsCles);
            for($i = 0; $i < count($tabMotsCles); $i++) {
                $cle = "param" . $i;
                $parameters[$cle] = "%".$tabMotsCles[$i]."%";
                $parameter = ":".$cle;
                $orMotsCles->add($qb->expr()->like('m.sujet', $parameter));
                $orMotsCles->add($qb->expr()->like('m.message', $parameter));
            }
            $qb->andWhere($orMotsCles);
        }

        /*
        *    Exécution de la requête
        */

        $qb->setParameters($parameters)
            ->groupBy('m.id')
            ->orderBy("m.daty", 'DESC');;

        /*if($page == null){
            $qb->setFirstResult(0);
        }
        else{
            $start = ($page == 1) ? 0 : (($page-1) * $nombre);
            $qb->setFirstResult($start)
                ->setMaxResults($nombre);
        }*/
        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @return array
     * retourne la liste des mails dans le trash
     */
    public function findByTrashList(UserClient $user){
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->join('mp.mailTrash', 'mt')
            ->join('mp.mail', 'm')
            ->where('m.user = :idUser')
            ->setParameter('idUser', $user->getId());
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByIdMP($id){
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->select('DISTINCT(mp.idOriginemail)')
            ->join('mp.mail', 'm')
            ->where('m.id = :id')
            ->setParameter('id', $id);
        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findTrashList(UserClient $user, $dataTrash){
        $qb = $this->createQueryBuilder('mp');
        $qb
            ->select('GROUP_CONCAT(DISTINCT mp.to1) as customer, mp as people, GROUP_CONCAT(DISTINCT mp.from1) as custfrom')
            ->join("mp.mail", "m");
        $orWhere = $qb->expr()->orX();
        $orWhere->add($qb->expr()->eq("mp.userFrom", ":idUser"));
        $orWhere->add($qb->expr()->eq("mp.userTo", ":idUser"));
        $qb
            ->where($orWhere)
            ->andWhere('mp.id IN( :trash)')
            ->setParameter('idUser', $user->getId())
            ->setParameter('trash', explode(",", $dataTrash))
            ->groupBy('m.id');
            $qb->orderBy("mp.id", 'DESC');

        return $qb->getQuery()->getResult();
    }
}

