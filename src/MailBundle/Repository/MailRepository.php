<?php

namespace MailBundle\Repository;
use MailBundle\Entity\Mail;
use UserBundle\Entity\UserClient;

/**
 * MailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MailRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param Mail $mail
     * marquer un mail comme lu
     */
    public function markRead($id_mail) {
        $mailPeople  = $this->_em->getRepository('MailBundle:MailPeople')->findByIdMail($id_mail);
        $dateLecture = new \DateTime(date("Y-m-d H:i:s"));

        foreach($mailPeople as $mp){
            $mp->setLu(1);
            $mp->setDateLecture($dateLecture);
            $this->_em->flush($mp);
        }
    }
    

    /**
     * @return array
     * retourne la liste des mails trash
     */
    public function findFilterMailList($user, $motsCles, $debut, $fin, $priorite, $tbox, $type, $page, $nombre){
        $qb = $this->createQueryBuilder('m');
        $qb
            ->leftjoin("m.mailPeople", "p")
            ->leftJoin("m.mailPJ", "j")
            ->leftJoin("p.userFrom", "u")
            ->addSelect("p")
            ->addSelect("j")
            ->addSelect("u");

        /*
        *    Initialisation des parametres, on initialise directement les dates il y a toujours de l'intervalle
        */

        if( $debut != null && $fin != null ) {
            $parameters  = array("idUser" => $user, 'debut'  => date_create($debut), 'fin' => date_create($fin));
        }
        else{
            $parameters  = array("idUser" => $user);
        }

        /*
        *    Préparation du filtre par type de message (reçus / envoyés / tous)
        */
        $orUser = $qb->expr()->orX();
        if($type == 'outbox'){
            $orUser->add($qb->expr()->eq("p.userFrom", ":idUser"));
        }
        else if($type == 'inbox'){
            $orUser->add($qb->expr()->eq("p.userTo", ":idUser"));
        }
        else {
            $orUser->add($qb->expr()->eq("p.userFrom", ":idUser"));
            $orUser->add($qb->expr()->eq("p.userTo", ":idUser"));
        }
        $qb->andWhere($orUser);

        /*
        *    Préparation du filtre par boite aux lettres
        */
        if( $priorite !== null){
            $orPriorite = $qb->expr()->orX();
            for($k = 0; $k < count($priorite); $k++) {
                $priority = "priorite" .$k;
                $parameters[$priority] = $priorite[$k];
                $param = ":".$priority;
                $orPriorite->add($qb->expr()->eq('m.priorite', $param));
            }
            $qb->andWhere($orPriorite);
        }

        /*
        *    Préparation du filtre par boite aux lettres
        */
        if( $tbox !== null){
            $orTbox = $qb->expr()->orX();
            for($j = 0; $j < count($tbox); $j++) {
                $box = "tbox" .$j;
                $parameters[$box] = $tbox[$j];
                $parameter = ":".$box;
                $orTbox->add($qb->expr()->eq('m.tbox', $parameter));
            }
            $qb->andWhere($orTbox);
        }

        /*
        *    Préparation du filtre par intervalle de date
        */
        /* $andDate = $qb->expr()->andX();
        $andDate->add($qb->expr()->lte('m.daty', ":fin"));
        $andDate->add($qb->expr()->gte('m.daty', ":debut")); */

        if( $debut != null && $fin != null ) {
            $andDate = $qb->expr()->between('m.daty', ":debut", ":fin");
            $qb->andWhere($andDate);
        }

        /*
        *    Préparation des mots clés pour filtre par mots clés
        */

        if($motsCles != null){
            $orMotsCles = $qb->expr()->orX();
            $tabMotsCles = explode(",", $motsCles);
            for($i = 0; $i < count($tabMotsCles); $i++) {
                $cle = "param" . $i;
                $parameters[$cle] = "%".$tabMotsCles[$i]."%";
                $parameter = ":".$cle;
                $orMotsCles->add($qb->expr()->like('m.sujet', $parameter));
                $orMotsCles->add($qb->expr()->like('m.message', $parameter));
            }
            $qb->andWhere($orMotsCles);
        }

        /*
        *    Exécution de la requête
        */

        $qb->orderBy("m.daty", 'DESC')
            ->setParameters($parameters);

        if($page == null){
            $qb->setFirstResult(0);
        }
        else{
            $start = ($page == 1) ? 0 : (($page-1) * $nombre);
            $qb->setFirstResult($start)
                ->setMaxResults($nombre);
        }
        return $qb->getQuery()->getResult();
    }

    public function getParent($idMail)
    {
        $qb = $this->createQueryBuilder('m');
        $qb
            ->select('m, mp, mj')
            ->join('m.mailPeople', 'mp')
            ->join("m.mailMessage", "mm")
            ->leftJoin("m.mailPJ", "mj")
            ->where('mp.idOriginemail = 0')
            ->andWhere('m.id = :idMail')
            ->groupBy('m.id')
            ->setParameter('idMail', $idMail);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getMailEnfant($idMail)
    {
        $qb = $this->createQueryBuilder('m');
        $qb
            ->select('m, mp, mj')
            ->join('m.mailPeople', 'mp')
            ->join("m.mailMessage", "mm")
            ->leftJoin("m.mailPJ", "mj")
            ->where('mp.idOriginemail = :idMail')
            ->setParameter('idMail', $idMail)
            ->groupBy('m.id')
            ->orderBy("m.daty", 'ASC');

        return $qb->getQuery()->getResult();
    }
}
